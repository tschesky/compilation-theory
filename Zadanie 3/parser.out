Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations fundefs instructions
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> <empty>
Rule 4     declaration -> TYPE inits ;
Rule 5     declaration -> error ;
Rule 6     inits -> inits , init
Rule 7     inits -> init
Rule 8     init -> ID = expression
Rule 9     instructions -> instructions instruction
Rule 10    instructions -> instruction
Rule 11    instruction -> print_instr
Rule 12    instruction -> labeled_instr
Rule 13    instruction -> assignment
Rule 14    instruction -> choice_instr
Rule 15    instruction -> while_instr
Rule 16    instruction -> repeat_instr
Rule 17    instruction -> return_instr
Rule 18    instruction -> break_instr
Rule 19    instruction -> continue_instr
Rule 20    instruction -> compound_instr
Rule 21    print_instr -> PRINT expression ;
Rule 22    print_instr -> PRINT error ;
Rule 23    labeled_instr -> ID : instruction
Rule 24    assignment -> ID = expression ;
Rule 25    choice_instr -> IF ( condition ) instruction
Rule 26    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 27    choice_instr -> IF ( error ) instruction
Rule 28    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 29    while_instr -> WHILE ( condition ) instruction
Rule 30    while_instr -> WHILE ( error ) instruction
Rule 31    repeat_instr -> REPEAT instructions UNTIL condition ;
Rule 32    return_instr -> RETURN expression ;
Rule 33    continue_instr -> CONTINUE ;
Rule 34    break_instr -> BREAK ;
Rule 35    compound_instr -> { declarations instructions }
Rule 36    condition -> expression
Rule 37    const -> INTEGER
Rule 38    const -> FLOAT
Rule 39    const -> STRING
Rule 40    expression -> ID
Rule 41    expression -> const
Rule 42    expression -> expression + expression
Rule 43    expression -> expression - expression
Rule 44    expression -> expression * expression
Rule 45    expression -> expression / expression
Rule 46    expression -> expression % expression
Rule 47    expression -> expression | expression
Rule 48    expression -> expression & expression
Rule 49    expression -> expression ^ expression
Rule 50    expression -> expression AND expression
Rule 51    expression -> expression OR expression
Rule 52    expression -> expression SHL expression
Rule 53    expression -> expression SHR expression
Rule 54    expression -> expression EQ expression
Rule 55    expression -> expression NEQ expression
Rule 56    expression -> expression > expression
Rule 57    expression -> expression < expression
Rule 58    expression -> expression LE expression
Rule 59    expression -> expression GE expression
Rule 60    expression -> ( expression )
Rule 61    expression -> ( error )
Rule 62    expression -> ID ( expr_list_or_empty )
Rule 63    expression -> ID ( error )
Rule 64    expr_list_or_empty -> expr_list
Rule 65    expr_list_or_empty -> <empty>
Rule 66    expr_list -> expr_list , expression
Rule 67    expr_list -> expression
Rule 68    fundefs -> fundef fundefs
Rule 69    fundefs -> <empty>
Rule 70    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 71    args_list_or_empty -> args_list
Rule 72    args_list_or_empty -> <empty>
Rule 73    args_list -> args_list , arg
Rule 74    args_list -> arg
Rule 75    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 46
&                    : 48
(                    : 25 26 27 28 29 30 60 61 62 63 70
)                    : 25 26 27 28 29 30 60 61 62 63 70
*                    : 44
+                    : 42
,                    : 6 66 73
-                    : 43
/                    : 45
:                    : 23
;                    : 4 5 21 22 24 31 32 33 34
<                    : 57
=                    : 8 24
>                    : 56
AND                  : 50
BREAK                : 34
CONTINUE             : 33
ELSE                 : 26 28
EQ                   : 54
FLOAT                : 38
GE                   : 59
ID                   : 8 23 24 40 62 63 70 75
IF                   : 25 26 27 28
INTEGER              : 37
LE                   : 58
NEQ                  : 55
OR                   : 51
PRINT                : 21 22
REPEAT               : 31
RETURN               : 32
SHL                  : 52
SHR                  : 53
STRING               : 39
TYPE                 : 4 70 75
UNTIL                : 31
WHILE                : 29 30
^                    : 49
error                : 5 22 27 28 30 61 63
{                    : 35
|                    : 47
}                    : 35

Nonterminals, with rules where they appear

arg                  : 73 74
args_list            : 71 73
args_list_or_empty   : 70
assignment           : 13
break_instr          : 18
choice_instr         : 14
compound_instr       : 20 70
condition            : 25 26 29 31
const                : 41
continue_instr       : 19
declaration          : 2
declarations         : 1 2 35
expr_list            : 64 66
expr_list_or_empty   : 62
expression           : 8 21 24 32 36 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 66 67
fundef               : 68
fundefs              : 1 68
init                 : 6 7
inits                : 4 6
instruction          : 9 10 23 25 26 26 27 28 28 29 30
instructions         : 1 9 31 35
labeled_instr        : 12
print_instr          : 11
program              : 0
repeat_instr         : 16
return_instr         : 17
while_instr          : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations fundefs instructions
    (2) declarations -> . declarations declaration
    (3) declarations -> .

    TYPE            reduce using rule 3 (declarations -> .)
    error           reduce using rule 3 (declarations -> .)
    PRINT           reduce using rule 3 (declarations -> .)
    ID              reduce using rule 3 (declarations -> .)
    IF              reduce using rule 3 (declarations -> .)
    WHILE           reduce using rule 3 (declarations -> .)
    REPEAT          reduce using rule 3 (declarations -> .)
    RETURN          reduce using rule 3 (declarations -> .)
    BREAK           reduce using rule 3 (declarations -> .)
    CONTINUE        reduce using rule 3 (declarations -> .)
    {               reduce using rule 3 (declarations -> .)

    program                        shift and go to state 1
    declarations                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> declarations . fundefs instructions
    (2) declarations -> declarations . declaration
    (68) fundefs -> . fundef fundefs
    (69) fundefs -> .
    (4) declaration -> . TYPE inits ;
    (5) declaration -> . error ;
    (70) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr

    PRINT           reduce using rule 69 (fundefs -> .)
    ID              reduce using rule 69 (fundefs -> .)
    IF              reduce using rule 69 (fundefs -> .)
    WHILE           reduce using rule 69 (fundefs -> .)
    REPEAT          reduce using rule 69 (fundefs -> .)
    RETURN          reduce using rule 69 (fundefs -> .)
    BREAK           reduce using rule 69 (fundefs -> .)
    CONTINUE        reduce using rule 69 (fundefs -> .)
    {               reduce using rule 69 (fundefs -> .)
    TYPE            shift and go to state 7
    error           shift and go to state 3

    fundefs                        shift and go to state 4
    fundef                         shift and go to state 5
    declaration                    shift and go to state 6

state 3

    (5) declaration -> error . ;

    ;               shift and go to state 8


state 4

    (1) program -> declarations fundefs . instructions
    (9) instructions -> . instructions instruction
    (10) instructions -> . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 9
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16
    repeat_instr                   shift and go to state 13
    instructions                   shift and go to state 17

state 5

    (68) fundefs -> fundef . fundefs
    (68) fundefs -> . fundef fundefs
    (69) fundefs -> .
    (70) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr

    PRINT           reduce using rule 69 (fundefs -> .)
    ID              reduce using rule 69 (fundefs -> .)
    IF              reduce using rule 69 (fundefs -> .)
    WHILE           reduce using rule 69 (fundefs -> .)
    REPEAT          reduce using rule 69 (fundefs -> .)
    RETURN          reduce using rule 69 (fundefs -> .)
    BREAK           reduce using rule 69 (fundefs -> .)
    CONTINUE        reduce using rule 69 (fundefs -> .)
    {               reduce using rule 69 (fundefs -> .)
    TYPE            shift and go to state 31

    fundefs                        shift and go to state 30
    fundef                         shift and go to state 5

state 6

    (2) declarations -> declarations declaration .

    TYPE            reduce using rule 2 (declarations -> declarations declaration .)
    error           reduce using rule 2 (declarations -> declarations declaration .)
    PRINT           reduce using rule 2 (declarations -> declarations declaration .)
    ID              reduce using rule 2 (declarations -> declarations declaration .)
    IF              reduce using rule 2 (declarations -> declarations declaration .)
    WHILE           reduce using rule 2 (declarations -> declarations declaration .)
    REPEAT          reduce using rule 2 (declarations -> declarations declaration .)
    RETURN          reduce using rule 2 (declarations -> declarations declaration .)
    BREAK           reduce using rule 2 (declarations -> declarations declaration .)
    CONTINUE        reduce using rule 2 (declarations -> declarations declaration .)
    {               reduce using rule 2 (declarations -> declarations declaration .)


state 7

    (4) declaration -> TYPE . inits ;
    (70) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (6) inits -> . inits , init
    (7) inits -> . init
    (8) init -> . ID = expression

    ID              shift and go to state 34

    init                           shift and go to state 32
    inits                          shift and go to state 33

state 8

    (5) declaration -> error ; .

    TYPE            reduce using rule 5 (declaration -> error ; .)
    error           reduce using rule 5 (declaration -> error ; .)
    PRINT           reduce using rule 5 (declaration -> error ; .)
    ID              reduce using rule 5 (declaration -> error ; .)
    IF              reduce using rule 5 (declaration -> error ; .)
    WHILE           reduce using rule 5 (declaration -> error ; .)
    REPEAT          reduce using rule 5 (declaration -> error ; .)
    RETURN          reduce using rule 5 (declaration -> error ; .)
    BREAK           reduce using rule 5 (declaration -> error ; .)
    CONTINUE        reduce using rule 5 (declaration -> error ; .)
    {               reduce using rule 5 (declaration -> error ; .)


state 9

    (10) instructions -> instruction .

    }               reduce using rule 10 (instructions -> instruction .)
    PRINT           reduce using rule 10 (instructions -> instruction .)
    ID              reduce using rule 10 (instructions -> instruction .)
    IF              reduce using rule 10 (instructions -> instruction .)
    WHILE           reduce using rule 10 (instructions -> instruction .)
    REPEAT          reduce using rule 10 (instructions -> instruction .)
    RETURN          reduce using rule 10 (instructions -> instruction .)
    BREAK           reduce using rule 10 (instructions -> instruction .)
    CONTINUE        reduce using rule 10 (instructions -> instruction .)
    {               reduce using rule 10 (instructions -> instruction .)
    $end            reduce using rule 10 (instructions -> instruction .)
    UNTIL           reduce using rule 10 (instructions -> instruction .)


state 10

    (32) return_instr -> RETURN . expression ;
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 41

state 11

    (14) instruction -> choice_instr .

    PRINT           reduce using rule 14 (instruction -> choice_instr .)
    ID              reduce using rule 14 (instruction -> choice_instr .)
    IF              reduce using rule 14 (instruction -> choice_instr .)
    WHILE           reduce using rule 14 (instruction -> choice_instr .)
    REPEAT          reduce using rule 14 (instruction -> choice_instr .)
    RETURN          reduce using rule 14 (instruction -> choice_instr .)
    BREAK           reduce using rule 14 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 14 (instruction -> choice_instr .)
    {               reduce using rule 14 (instruction -> choice_instr .)
    $end            reduce using rule 14 (instruction -> choice_instr .)
    UNTIL           reduce using rule 14 (instruction -> choice_instr .)
    }               reduce using rule 14 (instruction -> choice_instr .)
    ELSE            reduce using rule 14 (instruction -> choice_instr .)


state 12

    (21) print_instr -> PRINT . expression ;
    (22) print_instr -> PRINT . error ;
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    error           shift and go to state 42
    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 43

state 13

    (16) instruction -> repeat_instr .

    PRINT           reduce using rule 16 (instruction -> repeat_instr .)
    ID              reduce using rule 16 (instruction -> repeat_instr .)
    IF              reduce using rule 16 (instruction -> repeat_instr .)
    WHILE           reduce using rule 16 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 16 (instruction -> repeat_instr .)
    RETURN          reduce using rule 16 (instruction -> repeat_instr .)
    BREAK           reduce using rule 16 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 16 (instruction -> repeat_instr .)
    {               reduce using rule 16 (instruction -> repeat_instr .)
    $end            reduce using rule 16 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 16 (instruction -> repeat_instr .)
    }               reduce using rule 16 (instruction -> repeat_instr .)
    ELSE            reduce using rule 16 (instruction -> repeat_instr .)


state 14

    (17) instruction -> return_instr .

    PRINT           reduce using rule 17 (instruction -> return_instr .)
    ID              reduce using rule 17 (instruction -> return_instr .)
    IF              reduce using rule 17 (instruction -> return_instr .)
    WHILE           reduce using rule 17 (instruction -> return_instr .)
    REPEAT          reduce using rule 17 (instruction -> return_instr .)
    RETURN          reduce using rule 17 (instruction -> return_instr .)
    BREAK           reduce using rule 17 (instruction -> return_instr .)
    CONTINUE        reduce using rule 17 (instruction -> return_instr .)
    {               reduce using rule 17 (instruction -> return_instr .)
    $end            reduce using rule 17 (instruction -> return_instr .)
    UNTIL           reduce using rule 17 (instruction -> return_instr .)
    }               reduce using rule 17 (instruction -> return_instr .)
    ELSE            reduce using rule 17 (instruction -> return_instr .)


state 15

    (19) instruction -> continue_instr .

    PRINT           reduce using rule 19 (instruction -> continue_instr .)
    ID              reduce using rule 19 (instruction -> continue_instr .)
    IF              reduce using rule 19 (instruction -> continue_instr .)
    WHILE           reduce using rule 19 (instruction -> continue_instr .)
    REPEAT          reduce using rule 19 (instruction -> continue_instr .)
    RETURN          reduce using rule 19 (instruction -> continue_instr .)
    BREAK           reduce using rule 19 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 19 (instruction -> continue_instr .)
    {               reduce using rule 19 (instruction -> continue_instr .)
    $end            reduce using rule 19 (instruction -> continue_instr .)
    UNTIL           reduce using rule 19 (instruction -> continue_instr .)
    }               reduce using rule 19 (instruction -> continue_instr .)
    ELSE            reduce using rule 19 (instruction -> continue_instr .)


state 16

    (15) instruction -> while_instr .

    PRINT           reduce using rule 15 (instruction -> while_instr .)
    ID              reduce using rule 15 (instruction -> while_instr .)
    IF              reduce using rule 15 (instruction -> while_instr .)
    WHILE           reduce using rule 15 (instruction -> while_instr .)
    REPEAT          reduce using rule 15 (instruction -> while_instr .)
    RETURN          reduce using rule 15 (instruction -> while_instr .)
    BREAK           reduce using rule 15 (instruction -> while_instr .)
    CONTINUE        reduce using rule 15 (instruction -> while_instr .)
    {               reduce using rule 15 (instruction -> while_instr .)
    $end            reduce using rule 15 (instruction -> while_instr .)
    UNTIL           reduce using rule 15 (instruction -> while_instr .)
    }               reduce using rule 15 (instruction -> while_instr .)
    ELSE            reduce using rule 15 (instruction -> while_instr .)


state 17

    (1) program -> declarations fundefs instructions .
    (9) instructions -> instructions . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    $end            reduce using rule 1 (program -> declarations fundefs instructions .)
    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 44
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16
    repeat_instr                   shift and go to state 13

state 18

    (31) repeat_instr -> REPEAT . instructions UNTIL condition ;
    (9) instructions -> . instructions instruction
    (10) instructions -> . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 9
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    repeat_instr                   shift and go to state 13
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16
    instructions                   shift and go to state 45

state 19

    (13) instruction -> assignment .

    PRINT           reduce using rule 13 (instruction -> assignment .)
    ID              reduce using rule 13 (instruction -> assignment .)
    IF              reduce using rule 13 (instruction -> assignment .)
    WHILE           reduce using rule 13 (instruction -> assignment .)
    REPEAT          reduce using rule 13 (instruction -> assignment .)
    RETURN          reduce using rule 13 (instruction -> assignment .)
    BREAK           reduce using rule 13 (instruction -> assignment .)
    CONTINUE        reduce using rule 13 (instruction -> assignment .)
    {               reduce using rule 13 (instruction -> assignment .)
    $end            reduce using rule 13 (instruction -> assignment .)
    UNTIL           reduce using rule 13 (instruction -> assignment .)
    }               reduce using rule 13 (instruction -> assignment .)
    ELSE            reduce using rule 13 (instruction -> assignment .)


state 20

    (12) instruction -> labeled_instr .

    PRINT           reduce using rule 12 (instruction -> labeled_instr .)
    ID              reduce using rule 12 (instruction -> labeled_instr .)
    IF              reduce using rule 12 (instruction -> labeled_instr .)
    WHILE           reduce using rule 12 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 12 (instruction -> labeled_instr .)
    RETURN          reduce using rule 12 (instruction -> labeled_instr .)
    BREAK           reduce using rule 12 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 12 (instruction -> labeled_instr .)
    {               reduce using rule 12 (instruction -> labeled_instr .)
    $end            reduce using rule 12 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 12 (instruction -> labeled_instr .)
    }               reduce using rule 12 (instruction -> labeled_instr .)
    ELSE            reduce using rule 12 (instruction -> labeled_instr .)


state 21

    (20) instruction -> compound_instr .

    PRINT           reduce using rule 20 (instruction -> compound_instr .)
    ID              reduce using rule 20 (instruction -> compound_instr .)
    IF              reduce using rule 20 (instruction -> compound_instr .)
    WHILE           reduce using rule 20 (instruction -> compound_instr .)
    REPEAT          reduce using rule 20 (instruction -> compound_instr .)
    RETURN          reduce using rule 20 (instruction -> compound_instr .)
    BREAK           reduce using rule 20 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 20 (instruction -> compound_instr .)
    {               reduce using rule 20 (instruction -> compound_instr .)
    $end            reduce using rule 20 (instruction -> compound_instr .)
    UNTIL           reduce using rule 20 (instruction -> compound_instr .)
    }               reduce using rule 20 (instruction -> compound_instr .)
    ELSE            reduce using rule 20 (instruction -> compound_instr .)


state 22

    (23) labeled_instr -> ID . : instruction
    (24) assignment -> ID . = expression ;

    :               shift and go to state 46
    =               shift and go to state 47


state 23

    (25) choice_instr -> IF . ( condition ) instruction
    (26) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (27) choice_instr -> IF . ( error ) instruction
    (28) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 48


state 24

    (18) instruction -> break_instr .

    PRINT           reduce using rule 18 (instruction -> break_instr .)
    ID              reduce using rule 18 (instruction -> break_instr .)
    IF              reduce using rule 18 (instruction -> break_instr .)
    WHILE           reduce using rule 18 (instruction -> break_instr .)
    REPEAT          reduce using rule 18 (instruction -> break_instr .)
    RETURN          reduce using rule 18 (instruction -> break_instr .)
    BREAK           reduce using rule 18 (instruction -> break_instr .)
    CONTINUE        reduce using rule 18 (instruction -> break_instr .)
    {               reduce using rule 18 (instruction -> break_instr .)
    $end            reduce using rule 18 (instruction -> break_instr .)
    UNTIL           reduce using rule 18 (instruction -> break_instr .)
    }               reduce using rule 18 (instruction -> break_instr .)
    ELSE            reduce using rule 18 (instruction -> break_instr .)


state 25

    (29) while_instr -> WHILE . ( condition ) instruction
    (30) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 49


state 26

    (34) break_instr -> BREAK . ;

    ;               shift and go to state 50


state 27

    (11) instruction -> print_instr .

    PRINT           reduce using rule 11 (instruction -> print_instr .)
    ID              reduce using rule 11 (instruction -> print_instr .)
    IF              reduce using rule 11 (instruction -> print_instr .)
    WHILE           reduce using rule 11 (instruction -> print_instr .)
    REPEAT          reduce using rule 11 (instruction -> print_instr .)
    RETURN          reduce using rule 11 (instruction -> print_instr .)
    BREAK           reduce using rule 11 (instruction -> print_instr .)
    CONTINUE        reduce using rule 11 (instruction -> print_instr .)
    {               reduce using rule 11 (instruction -> print_instr .)
    $end            reduce using rule 11 (instruction -> print_instr .)
    UNTIL           reduce using rule 11 (instruction -> print_instr .)
    }               reduce using rule 11 (instruction -> print_instr .)
    ELSE            reduce using rule 11 (instruction -> print_instr .)


state 28

    (33) continue_instr -> CONTINUE . ;

    ;               shift and go to state 51


state 29

    (35) compound_instr -> { . declarations instructions }
    (2) declarations -> . declarations declaration
    (3) declarations -> .

    TYPE            reduce using rule 3 (declarations -> .)
    error           reduce using rule 3 (declarations -> .)
    PRINT           reduce using rule 3 (declarations -> .)
    ID              reduce using rule 3 (declarations -> .)
    IF              reduce using rule 3 (declarations -> .)
    WHILE           reduce using rule 3 (declarations -> .)
    REPEAT          reduce using rule 3 (declarations -> .)
    RETURN          reduce using rule 3 (declarations -> .)
    BREAK           reduce using rule 3 (declarations -> .)
    CONTINUE        reduce using rule 3 (declarations -> .)
    {               reduce using rule 3 (declarations -> .)

    declarations                   shift and go to state 52

state 30

    (68) fundefs -> fundef fundefs .

    PRINT           reduce using rule 68 (fundefs -> fundef fundefs .)
    ID              reduce using rule 68 (fundefs -> fundef fundefs .)
    IF              reduce using rule 68 (fundefs -> fundef fundefs .)
    WHILE           reduce using rule 68 (fundefs -> fundef fundefs .)
    REPEAT          reduce using rule 68 (fundefs -> fundef fundefs .)
    RETURN          reduce using rule 68 (fundefs -> fundef fundefs .)
    BREAK           reduce using rule 68 (fundefs -> fundef fundefs .)
    CONTINUE        reduce using rule 68 (fundefs -> fundef fundefs .)
    {               reduce using rule 68 (fundefs -> fundef fundefs .)


state 31

    (70) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr

    ID              shift and go to state 53


state 32

    (7) inits -> init .

    ;               reduce using rule 7 (inits -> init .)
    ,               reduce using rule 7 (inits -> init .)


state 33

    (4) declaration -> TYPE inits . ;
    (6) inits -> inits . , init

    ;               shift and go to state 54
    ,               shift and go to state 55


state 34

    (70) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (8) init -> ID . = expression

    (               shift and go to state 56
    =               shift and go to state 57


state 35

    (41) expression -> const .

    +               reduce using rule 41 (expression -> const .)
    -               reduce using rule 41 (expression -> const .)
    *               reduce using rule 41 (expression -> const .)
    /               reduce using rule 41 (expression -> const .)
    %               reduce using rule 41 (expression -> const .)
    |               reduce using rule 41 (expression -> const .)
    &               reduce using rule 41 (expression -> const .)
    ^               reduce using rule 41 (expression -> const .)
    AND             reduce using rule 41 (expression -> const .)
    OR              reduce using rule 41 (expression -> const .)
    SHL             reduce using rule 41 (expression -> const .)
    SHR             reduce using rule 41 (expression -> const .)
    EQ              reduce using rule 41 (expression -> const .)
    NEQ             reduce using rule 41 (expression -> const .)
    >               reduce using rule 41 (expression -> const .)
    <               reduce using rule 41 (expression -> const .)
    LE              reduce using rule 41 (expression -> const .)
    GE              reduce using rule 41 (expression -> const .)
    ;               reduce using rule 41 (expression -> const .)
    )               reduce using rule 41 (expression -> const .)
    ,               reduce using rule 41 (expression -> const .)


state 36

    (37) const -> INTEGER .

    +               reduce using rule 37 (const -> INTEGER .)
    -               reduce using rule 37 (const -> INTEGER .)
    *               reduce using rule 37 (const -> INTEGER .)
    /               reduce using rule 37 (const -> INTEGER .)
    %               reduce using rule 37 (const -> INTEGER .)
    |               reduce using rule 37 (const -> INTEGER .)
    &               reduce using rule 37 (const -> INTEGER .)
    ^               reduce using rule 37 (const -> INTEGER .)
    AND             reduce using rule 37 (const -> INTEGER .)
    OR              reduce using rule 37 (const -> INTEGER .)
    SHL             reduce using rule 37 (const -> INTEGER .)
    SHR             reduce using rule 37 (const -> INTEGER .)
    EQ              reduce using rule 37 (const -> INTEGER .)
    NEQ             reduce using rule 37 (const -> INTEGER .)
    >               reduce using rule 37 (const -> INTEGER .)
    <               reduce using rule 37 (const -> INTEGER .)
    LE              reduce using rule 37 (const -> INTEGER .)
    GE              reduce using rule 37 (const -> INTEGER .)
    ,               reduce using rule 37 (const -> INTEGER .)
    )               reduce using rule 37 (const -> INTEGER .)
    ;               reduce using rule 37 (const -> INTEGER .)


state 37

    (39) const -> STRING .

    +               reduce using rule 39 (const -> STRING .)
    -               reduce using rule 39 (const -> STRING .)
    *               reduce using rule 39 (const -> STRING .)
    /               reduce using rule 39 (const -> STRING .)
    %               reduce using rule 39 (const -> STRING .)
    |               reduce using rule 39 (const -> STRING .)
    &               reduce using rule 39 (const -> STRING .)
    ^               reduce using rule 39 (const -> STRING .)
    AND             reduce using rule 39 (const -> STRING .)
    OR              reduce using rule 39 (const -> STRING .)
    SHL             reduce using rule 39 (const -> STRING .)
    SHR             reduce using rule 39 (const -> STRING .)
    EQ              reduce using rule 39 (const -> STRING .)
    NEQ             reduce using rule 39 (const -> STRING .)
    >               reduce using rule 39 (const -> STRING .)
    <               reduce using rule 39 (const -> STRING .)
    LE              reduce using rule 39 (const -> STRING .)
    GE              reduce using rule 39 (const -> STRING .)
    ,               reduce using rule 39 (const -> STRING .)
    )               reduce using rule 39 (const -> STRING .)
    ;               reduce using rule 39 (const -> STRING .)


state 38

    (40) expression -> ID .
    (62) expression -> ID . ( expr_list_or_empty )
    (63) expression -> ID . ( error )

    +               reduce using rule 40 (expression -> ID .)
    -               reduce using rule 40 (expression -> ID .)
    *               reduce using rule 40 (expression -> ID .)
    /               reduce using rule 40 (expression -> ID .)
    %               reduce using rule 40 (expression -> ID .)
    |               reduce using rule 40 (expression -> ID .)
    &               reduce using rule 40 (expression -> ID .)
    ^               reduce using rule 40 (expression -> ID .)
    AND             reduce using rule 40 (expression -> ID .)
    OR              reduce using rule 40 (expression -> ID .)
    SHL             reduce using rule 40 (expression -> ID .)
    SHR             reduce using rule 40 (expression -> ID .)
    EQ              reduce using rule 40 (expression -> ID .)
    NEQ             reduce using rule 40 (expression -> ID .)
    >               reduce using rule 40 (expression -> ID .)
    <               reduce using rule 40 (expression -> ID .)
    LE              reduce using rule 40 (expression -> ID .)
    GE              reduce using rule 40 (expression -> ID .)
    ;               reduce using rule 40 (expression -> ID .)
    )               reduce using rule 40 (expression -> ID .)
    ,               reduce using rule 40 (expression -> ID .)
    (               shift and go to state 58


state 39

    (38) const -> FLOAT .

    +               reduce using rule 38 (const -> FLOAT .)
    -               reduce using rule 38 (const -> FLOAT .)
    *               reduce using rule 38 (const -> FLOAT .)
    /               reduce using rule 38 (const -> FLOAT .)
    %               reduce using rule 38 (const -> FLOAT .)
    |               reduce using rule 38 (const -> FLOAT .)
    &               reduce using rule 38 (const -> FLOAT .)
    ^               reduce using rule 38 (const -> FLOAT .)
    AND             reduce using rule 38 (const -> FLOAT .)
    OR              reduce using rule 38 (const -> FLOAT .)
    SHL             reduce using rule 38 (const -> FLOAT .)
    SHR             reduce using rule 38 (const -> FLOAT .)
    EQ              reduce using rule 38 (const -> FLOAT .)
    NEQ             reduce using rule 38 (const -> FLOAT .)
    >               reduce using rule 38 (const -> FLOAT .)
    <               reduce using rule 38 (const -> FLOAT .)
    LE              reduce using rule 38 (const -> FLOAT .)
    GE              reduce using rule 38 (const -> FLOAT .)
    ,               reduce using rule 38 (const -> FLOAT .)
    )               reduce using rule 38 (const -> FLOAT .)
    ;               reduce using rule 38 (const -> FLOAT .)


state 40

    (60) expression -> ( . expression )
    (61) expression -> ( . error )
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    error           shift and go to state 59
    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 60

state 41

    (32) return_instr -> RETURN expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               shift and go to state 76
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 42

    (22) print_instr -> PRINT error . ;

    ;               shift and go to state 80


state 43

    (21) print_instr -> PRINT expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               shift and go to state 81
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 44

    (9) instructions -> instructions instruction .

    }               reduce using rule 9 (instructions -> instructions instruction .)
    PRINT           reduce using rule 9 (instructions -> instructions instruction .)
    ID              reduce using rule 9 (instructions -> instructions instruction .)
    IF              reduce using rule 9 (instructions -> instructions instruction .)
    WHILE           reduce using rule 9 (instructions -> instructions instruction .)
    REPEAT          reduce using rule 9 (instructions -> instructions instruction .)
    RETURN          reduce using rule 9 (instructions -> instructions instruction .)
    BREAK           reduce using rule 9 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 9 (instructions -> instructions instruction .)
    {               reduce using rule 9 (instructions -> instructions instruction .)
    $end            reduce using rule 9 (instructions -> instructions instruction .)
    UNTIL           reduce using rule 9 (instructions -> instructions instruction .)


state 45

    (31) repeat_instr -> REPEAT instructions . UNTIL condition ;
    (9) instructions -> instructions . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    UNTIL           shift and go to state 82
    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 44
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    repeat_instr                   shift and go to state 13
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16

state 46

    (23) labeled_instr -> ID : . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 83
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 20
    repeat_instr                   shift and go to state 13

state 47

    (24) assignment -> ID = . expression ;
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 84

state 48

    (25) choice_instr -> IF ( . condition ) instruction
    (26) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (27) choice_instr -> IF ( . error ) instruction
    (28) choice_instr -> IF ( . error ) instruction ELSE instruction
    (36) condition -> . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    error           shift and go to state 86
    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 87
    condition                      shift and go to state 85

state 49

    (29) while_instr -> WHILE ( . condition ) instruction
    (30) while_instr -> WHILE ( . error ) instruction
    (36) condition -> . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    error           shift and go to state 89
    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 87
    condition                      shift and go to state 88

state 50

    (34) break_instr -> BREAK ; .

    PRINT           reduce using rule 34 (break_instr -> BREAK ; .)
    ID              reduce using rule 34 (break_instr -> BREAK ; .)
    IF              reduce using rule 34 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 34 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 34 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 34 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 34 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 34 (break_instr -> BREAK ; .)
    {               reduce using rule 34 (break_instr -> BREAK ; .)
    $end            reduce using rule 34 (break_instr -> BREAK ; .)
    UNTIL           reduce using rule 34 (break_instr -> BREAK ; .)
    }               reduce using rule 34 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 34 (break_instr -> BREAK ; .)


state 51

    (33) continue_instr -> CONTINUE ; .

    PRINT           reduce using rule 33 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 33 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 33 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 33 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 33 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 33 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 33 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 33 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 33 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 33 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 33 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 33 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 33 (continue_instr -> CONTINUE ; .)


state 52

    (35) compound_instr -> { declarations . instructions }
    (2) declarations -> declarations . declaration
    (9) instructions -> . instructions instruction
    (10) instructions -> . instruction
    (4) declaration -> . TYPE inits ;
    (5) declaration -> . error ;
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    TYPE            shift and go to state 91
    error           shift and go to state 3
    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    break_instr                    shift and go to state 24
    instruction                    shift and go to state 9
    assignment                     shift and go to state 19
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    declaration                    shift and go to state 6
    while_instr                    shift and go to state 16
    repeat_instr                   shift and go to state 13
    instructions                   shift and go to state 90

state 53

    (70) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr

    (               shift and go to state 56


state 54

    (4) declaration -> TYPE inits ; .

    TYPE            reduce using rule 4 (declaration -> TYPE inits ; .)
    error           reduce using rule 4 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 4 (declaration -> TYPE inits ; .)
    ID              reduce using rule 4 (declaration -> TYPE inits ; .)
    IF              reduce using rule 4 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 4 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 4 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 4 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 4 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 4 (declaration -> TYPE inits ; .)
    {               reduce using rule 4 (declaration -> TYPE inits ; .)


state 55

    (6) inits -> inits , . init
    (8) init -> . ID = expression

    ID              shift and go to state 93

    init                           shift and go to state 92

state 56

    (70) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (71) args_list_or_empty -> . args_list
    (72) args_list_or_empty -> .
    (73) args_list -> . args_list , arg
    (74) args_list -> . arg
    (75) arg -> . TYPE ID

    )               reduce using rule 72 (args_list_or_empty -> .)
    TYPE            shift and go to state 97

    args_list_or_empty             shift and go to state 95
    arg                            shift and go to state 96
    args_list                      shift and go to state 94

state 57

    (8) init -> ID = . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 98

state 58

    (62) expression -> ID ( . expr_list_or_empty )
    (63) expression -> ID ( . error )
    (64) expr_list_or_empty -> . expr_list
    (65) expr_list_or_empty -> .
    (66) expr_list -> . expr_list , expression
    (67) expr_list -> . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    error           shift and go to state 101
    )               reduce using rule 65 (expr_list_or_empty -> .)
    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    expr_list                      shift and go to state 99
    expr_list_or_empty             shift and go to state 100
    expression                     shift and go to state 102
    const                          shift and go to state 35

state 59

    (61) expression -> ( error . )

    )               shift and go to state 103


state 60

    (60) expression -> ( expression . )
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    )               shift and go to state 104
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 61

    (50) expression -> expression AND . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 105

state 62

    (53) expression -> expression SHR . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 106

state 63

    (58) expression -> expression LE . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 107

state 64

    (48) expression -> expression & . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 108

state 65

    (57) expression -> expression < . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 109

state 66

    (52) expression -> expression SHL . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 110

state 67

    (42) expression -> expression + . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 111

state 68

    (44) expression -> expression * . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 112

state 69

    (43) expression -> expression - . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 113

state 70

    (45) expression -> expression / . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 114

state 71

    (51) expression -> expression OR . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 115

state 72

    (54) expression -> expression EQ . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 116

state 73

    (56) expression -> expression > . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 117

state 74

    (59) expression -> expression GE . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 118

state 75

    (46) expression -> expression % . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 119

state 76

    (32) return_instr -> RETURN expression ; .

    }               reduce using rule 32 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 32 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 32 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 32 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 32 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 32 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 32 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 32 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 32 (return_instr -> RETURN expression ; .)
    {               reduce using rule 32 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 32 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 32 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 32 (return_instr -> RETURN expression ; .)


state 77

    (55) expression -> expression NEQ . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 120

state 78

    (47) expression -> expression | . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 121

state 79

    (49) expression -> expression ^ . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 122

state 80

    (22) print_instr -> PRINT error ; .

    }               reduce using rule 22 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 22 (print_instr -> PRINT error ; .)
    ID              reduce using rule 22 (print_instr -> PRINT error ; .)
    IF              reduce using rule 22 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 22 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 22 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 22 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 22 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 22 (print_instr -> PRINT error ; .)
    {               reduce using rule 22 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 22 (print_instr -> PRINT error ; .)
    $end            reduce using rule 22 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 22 (print_instr -> PRINT error ; .)


state 81

    (21) print_instr -> PRINT expression ; .

    }               reduce using rule 21 (print_instr -> PRINT expression ; .)
    PRINT           reduce using rule 21 (print_instr -> PRINT expression ; .)
    ID              reduce using rule 21 (print_instr -> PRINT expression ; .)
    IF              reduce using rule 21 (print_instr -> PRINT expression ; .)
    WHILE           reduce using rule 21 (print_instr -> PRINT expression ; .)
    REPEAT          reduce using rule 21 (print_instr -> PRINT expression ; .)
    RETURN          reduce using rule 21 (print_instr -> PRINT expression ; .)
    BREAK           reduce using rule 21 (print_instr -> PRINT expression ; .)
    CONTINUE        reduce using rule 21 (print_instr -> PRINT expression ; .)
    {               reduce using rule 21 (print_instr -> PRINT expression ; .)
    UNTIL           reduce using rule 21 (print_instr -> PRINT expression ; .)
    $end            reduce using rule 21 (print_instr -> PRINT expression ; .)
    ELSE            reduce using rule 21 (print_instr -> PRINT expression ; .)


state 82

    (31) repeat_instr -> REPEAT instructions UNTIL . condition ;
    (36) condition -> . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    const                          shift and go to state 35
    expression                     shift and go to state 87
    condition                      shift and go to state 123

state 83

    (23) labeled_instr -> ID : instruction .

    PRINT           reduce using rule 23 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 23 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 23 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 23 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 23 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 23 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 23 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 23 (labeled_instr -> ID : instruction .)
    {               reduce using rule 23 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 23 (labeled_instr -> ID : instruction .)
    UNTIL           reduce using rule 23 (labeled_instr -> ID : instruction .)
    }               reduce using rule 23 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 23 (labeled_instr -> ID : instruction .)


state 84

    (24) assignment -> ID = expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               shift and go to state 124
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 85

    (25) choice_instr -> IF ( condition . ) instruction
    (26) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 125


state 86

    (27) choice_instr -> IF ( error . ) instruction
    (28) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 126


state 87

    (36) condition -> expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    )               reduce using rule 36 (condition -> expression .)
    ;               reduce using rule 36 (condition -> expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 88

    (29) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 127


state 89

    (30) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 128


state 90

    (35) compound_instr -> { declarations instructions . }
    (9) instructions -> instructions . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    }               shift and go to state 129
    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    instruction                    shift and go to state 44
    assignment                     shift and go to state 19
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16
    repeat_instr                   shift and go to state 13

state 91

    (4) declaration -> TYPE . inits ;
    (6) inits -> . inits , init
    (7) inits -> . init
    (8) init -> . ID = expression

    ID              shift and go to state 93

    init                           shift and go to state 32
    inits                          shift and go to state 33

state 92

    (6) inits -> inits , init .

    ;               reduce using rule 6 (inits -> inits , init .)
    ,               reduce using rule 6 (inits -> inits , init .)


state 93

    (8) init -> ID . = expression

    =               shift and go to state 57


state 94

    (71) args_list_or_empty -> args_list .
    (73) args_list -> args_list . , arg

    )               reduce using rule 71 (args_list_or_empty -> args_list .)
    ,               shift and go to state 130


state 95

    (70) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 131


state 96

    (74) args_list -> arg .

    ,               reduce using rule 74 (args_list -> arg .)
    )               reduce using rule 74 (args_list -> arg .)


state 97

    (75) arg -> TYPE . ID

    ID              shift and go to state 132


state 98

    (8) init -> ID = expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               reduce using rule 8 (init -> ID = expression .)
    ,               reduce using rule 8 (init -> ID = expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 99

    (64) expr_list_or_empty -> expr_list .
    (66) expr_list -> expr_list . , expression

    )               reduce using rule 64 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 133


state 100

    (62) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 134


state 101

    (63) expression -> ID ( error . )

    )               shift and go to state 135


state 102

    (67) expr_list -> expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ,               reduce using rule 67 (expr_list -> expression .)
    )               reduce using rule 67 (expr_list -> expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 103

    (61) expression -> ( error ) .

    +               reduce using rule 61 (expression -> ( error ) .)
    -               reduce using rule 61 (expression -> ( error ) .)
    *               reduce using rule 61 (expression -> ( error ) .)
    /               reduce using rule 61 (expression -> ( error ) .)
    %               reduce using rule 61 (expression -> ( error ) .)
    |               reduce using rule 61 (expression -> ( error ) .)
    &               reduce using rule 61 (expression -> ( error ) .)
    ^               reduce using rule 61 (expression -> ( error ) .)
    AND             reduce using rule 61 (expression -> ( error ) .)
    OR              reduce using rule 61 (expression -> ( error ) .)
    SHL             reduce using rule 61 (expression -> ( error ) .)
    SHR             reduce using rule 61 (expression -> ( error ) .)
    EQ              reduce using rule 61 (expression -> ( error ) .)
    NEQ             reduce using rule 61 (expression -> ( error ) .)
    >               reduce using rule 61 (expression -> ( error ) .)
    <               reduce using rule 61 (expression -> ( error ) .)
    LE              reduce using rule 61 (expression -> ( error ) .)
    GE              reduce using rule 61 (expression -> ( error ) .)
    ;               reduce using rule 61 (expression -> ( error ) .)
    )               reduce using rule 61 (expression -> ( error ) .)
    ,               reduce using rule 61 (expression -> ( error ) .)


state 104

    (60) expression -> ( expression ) .

    +               reduce using rule 60 (expression -> ( expression ) .)
    -               reduce using rule 60 (expression -> ( expression ) .)
    *               reduce using rule 60 (expression -> ( expression ) .)
    /               reduce using rule 60 (expression -> ( expression ) .)
    %               reduce using rule 60 (expression -> ( expression ) .)
    |               reduce using rule 60 (expression -> ( expression ) .)
    &               reduce using rule 60 (expression -> ( expression ) .)
    ^               reduce using rule 60 (expression -> ( expression ) .)
    AND             reduce using rule 60 (expression -> ( expression ) .)
    OR              reduce using rule 60 (expression -> ( expression ) .)
    SHL             reduce using rule 60 (expression -> ( expression ) .)
    SHR             reduce using rule 60 (expression -> ( expression ) .)
    EQ              reduce using rule 60 (expression -> ( expression ) .)
    NEQ             reduce using rule 60 (expression -> ( expression ) .)
    >               reduce using rule 60 (expression -> ( expression ) .)
    <               reduce using rule 60 (expression -> ( expression ) .)
    LE              reduce using rule 60 (expression -> ( expression ) .)
    GE              reduce using rule 60 (expression -> ( expression ) .)
    ;               reduce using rule 60 (expression -> ( expression ) .)
    )               reduce using rule 60 (expression -> ( expression ) .)
    ,               reduce using rule 60 (expression -> ( expression ) .)


state 105

    (50) expression -> expression AND expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    AND             reduce using rule 50 (expression -> expression AND expression .)
    OR              reduce using rule 50 (expression -> expression AND expression .)
    ;               reduce using rule 50 (expression -> expression AND expression .)
    )               reduce using rule 50 (expression -> expression AND expression .)
    ,               reduce using rule 50 (expression -> expression AND expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74

  ! +               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]


state 106

    (53) expression -> expression SHR expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 53 (expression -> expression SHR expression .)
    &               reduce using rule 53 (expression -> expression SHR expression .)
    ^               reduce using rule 53 (expression -> expression SHR expression .)
    AND             reduce using rule 53 (expression -> expression SHR expression .)
    OR              reduce using rule 53 (expression -> expression SHR expression .)
    SHL             reduce using rule 53 (expression -> expression SHR expression .)
    SHR             reduce using rule 53 (expression -> expression SHR expression .)
    EQ              reduce using rule 53 (expression -> expression SHR expression .)
    NEQ             reduce using rule 53 (expression -> expression SHR expression .)
    >               reduce using rule 53 (expression -> expression SHR expression .)
    <               reduce using rule 53 (expression -> expression SHR expression .)
    LE              reduce using rule 53 (expression -> expression SHR expression .)
    GE              reduce using rule 53 (expression -> expression SHR expression .)
    ;               reduce using rule 53 (expression -> expression SHR expression .)
    )               reduce using rule 53 (expression -> expression SHR expression .)
    ,               reduce using rule 53 (expression -> expression SHR expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75

  ! +               [ reduce using rule 53 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 53 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 53 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! SHL             [ shift and go to state 66 ]
  ! SHR             [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 107

    (58) expression -> expression LE expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 58 (expression -> expression LE expression .)
    &               reduce using rule 58 (expression -> expression LE expression .)
    ^               reduce using rule 58 (expression -> expression LE expression .)
    AND             reduce using rule 58 (expression -> expression LE expression .)
    OR              reduce using rule 58 (expression -> expression LE expression .)
    EQ              reduce using rule 58 (expression -> expression LE expression .)
    NEQ             reduce using rule 58 (expression -> expression LE expression .)
    >               reduce using rule 58 (expression -> expression LE expression .)
    <               reduce using rule 58 (expression -> expression LE expression .)
    LE              reduce using rule 58 (expression -> expression LE expression .)
    GE              reduce using rule 58 (expression -> expression LE expression .)
    ;               reduce using rule 58 (expression -> expression LE expression .)
    )               reduce using rule 58 (expression -> expression LE expression .)
    ,               reduce using rule 58 (expression -> expression LE expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    SHL             shift and go to state 66
    SHR             shift and go to state 62

  ! +               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 108

    (48) expression -> expression & expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 48 (expression -> expression & expression .)
    &               reduce using rule 48 (expression -> expression & expression .)
    ^               reduce using rule 48 (expression -> expression & expression .)
    AND             reduce using rule 48 (expression -> expression & expression .)
    OR              reduce using rule 48 (expression -> expression & expression .)
    ;               reduce using rule 48 (expression -> expression & expression .)
    )               reduce using rule 48 (expression -> expression & expression .)
    ,               reduce using rule 48 (expression -> expression & expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74

  ! +               [ reduce using rule 48 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 48 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 48 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 48 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 48 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 48 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 48 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 48 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 48 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 48 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 48 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 48 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 48 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]


state 109

    (57) expression -> expression < expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression < expression .)
    &               reduce using rule 57 (expression -> expression < expression .)
    ^               reduce using rule 57 (expression -> expression < expression .)
    AND             reduce using rule 57 (expression -> expression < expression .)
    OR              reduce using rule 57 (expression -> expression < expression .)
    EQ              reduce using rule 57 (expression -> expression < expression .)
    NEQ             reduce using rule 57 (expression -> expression < expression .)
    >               reduce using rule 57 (expression -> expression < expression .)
    <               reduce using rule 57 (expression -> expression < expression .)
    LE              reduce using rule 57 (expression -> expression < expression .)
    GE              reduce using rule 57 (expression -> expression < expression .)
    ;               reduce using rule 57 (expression -> expression < expression .)
    )               reduce using rule 57 (expression -> expression < expression .)
    ,               reduce using rule 57 (expression -> expression < expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    SHL             shift and go to state 66
    SHR             shift and go to state 62

  ! +               [ reduce using rule 57 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 57 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 57 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 110

    (52) expression -> expression SHL expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 52 (expression -> expression SHL expression .)
    &               reduce using rule 52 (expression -> expression SHL expression .)
    ^               reduce using rule 52 (expression -> expression SHL expression .)
    AND             reduce using rule 52 (expression -> expression SHL expression .)
    OR              reduce using rule 52 (expression -> expression SHL expression .)
    SHL             reduce using rule 52 (expression -> expression SHL expression .)
    SHR             reduce using rule 52 (expression -> expression SHL expression .)
    EQ              reduce using rule 52 (expression -> expression SHL expression .)
    NEQ             reduce using rule 52 (expression -> expression SHL expression .)
    >               reduce using rule 52 (expression -> expression SHL expression .)
    <               reduce using rule 52 (expression -> expression SHL expression .)
    LE              reduce using rule 52 (expression -> expression SHL expression .)
    GE              reduce using rule 52 (expression -> expression SHL expression .)
    ;               reduce using rule 52 (expression -> expression SHL expression .)
    )               reduce using rule 52 (expression -> expression SHL expression .)
    ,               reduce using rule 52 (expression -> expression SHL expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75

  ! +               [ reduce using rule 52 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 52 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 52 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 52 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! SHL             [ shift and go to state 66 ]
  ! SHR             [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 111

    (42) expression -> expression + expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 42 (expression -> expression + expression .)
    -               reduce using rule 42 (expression -> expression + expression .)
    |               reduce using rule 42 (expression -> expression + expression .)
    &               reduce using rule 42 (expression -> expression + expression .)
    ^               reduce using rule 42 (expression -> expression + expression .)
    AND             reduce using rule 42 (expression -> expression + expression .)
    OR              reduce using rule 42 (expression -> expression + expression .)
    SHL             reduce using rule 42 (expression -> expression + expression .)
    SHR             reduce using rule 42 (expression -> expression + expression .)
    EQ              reduce using rule 42 (expression -> expression + expression .)
    NEQ             reduce using rule 42 (expression -> expression + expression .)
    >               reduce using rule 42 (expression -> expression + expression .)
    <               reduce using rule 42 (expression -> expression + expression .)
    LE              reduce using rule 42 (expression -> expression + expression .)
    GE              reduce using rule 42 (expression -> expression + expression .)
    ;               reduce using rule 42 (expression -> expression + expression .)
    )               reduce using rule 42 (expression -> expression + expression .)
    ,               reduce using rule 42 (expression -> expression + expression .)
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75

  ! *               [ reduce using rule 42 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 42 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 42 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 69 ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! SHL             [ shift and go to state 66 ]
  ! SHR             [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 112

    (44) expression -> expression * expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 44 (expression -> expression * expression .)
    -               reduce using rule 44 (expression -> expression * expression .)
    *               reduce using rule 44 (expression -> expression * expression .)
    /               reduce using rule 44 (expression -> expression * expression .)
    %               reduce using rule 44 (expression -> expression * expression .)
    |               reduce using rule 44 (expression -> expression * expression .)
    &               reduce using rule 44 (expression -> expression * expression .)
    ^               reduce using rule 44 (expression -> expression * expression .)
    AND             reduce using rule 44 (expression -> expression * expression .)
    OR              reduce using rule 44 (expression -> expression * expression .)
    SHL             reduce using rule 44 (expression -> expression * expression .)
    SHR             reduce using rule 44 (expression -> expression * expression .)
    EQ              reduce using rule 44 (expression -> expression * expression .)
    NEQ             reduce using rule 44 (expression -> expression * expression .)
    >               reduce using rule 44 (expression -> expression * expression .)
    <               reduce using rule 44 (expression -> expression * expression .)
    LE              reduce using rule 44 (expression -> expression * expression .)
    GE              reduce using rule 44 (expression -> expression * expression .)
    ;               reduce using rule 44 (expression -> expression * expression .)
    )               reduce using rule 44 (expression -> expression * expression .)
    ,               reduce using rule 44 (expression -> expression * expression .)

  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 70 ]
  ! %               [ shift and go to state 75 ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! SHL             [ shift and go to state 66 ]
  ! SHR             [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 113

    (43) expression -> expression - expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 43 (expression -> expression - expression .)
    -               reduce using rule 43 (expression -> expression - expression .)
    |               reduce using rule 43 (expression -> expression - expression .)
    &               reduce using rule 43 (expression -> expression - expression .)
    ^               reduce using rule 43 (expression -> expression - expression .)
    AND             reduce using rule 43 (expression -> expression - expression .)
    OR              reduce using rule 43 (expression -> expression - expression .)
    SHL             reduce using rule 43 (expression -> expression - expression .)
    SHR             reduce using rule 43 (expression -> expression - expression .)
    EQ              reduce using rule 43 (expression -> expression - expression .)
    NEQ             reduce using rule 43 (expression -> expression - expression .)
    >               reduce using rule 43 (expression -> expression - expression .)
    <               reduce using rule 43 (expression -> expression - expression .)
    LE              reduce using rule 43 (expression -> expression - expression .)
    GE              reduce using rule 43 (expression -> expression - expression .)
    ;               reduce using rule 43 (expression -> expression - expression .)
    )               reduce using rule 43 (expression -> expression - expression .)
    ,               reduce using rule 43 (expression -> expression - expression .)
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75

  ! *               [ reduce using rule 43 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 43 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 43 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 69 ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! SHL             [ shift and go to state 66 ]
  ! SHR             [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 114

    (45) expression -> expression / expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 45 (expression -> expression / expression .)
    -               reduce using rule 45 (expression -> expression / expression .)
    *               reduce using rule 45 (expression -> expression / expression .)
    /               reduce using rule 45 (expression -> expression / expression .)
    %               reduce using rule 45 (expression -> expression / expression .)
    |               reduce using rule 45 (expression -> expression / expression .)
    &               reduce using rule 45 (expression -> expression / expression .)
    ^               reduce using rule 45 (expression -> expression / expression .)
    AND             reduce using rule 45 (expression -> expression / expression .)
    OR              reduce using rule 45 (expression -> expression / expression .)
    SHL             reduce using rule 45 (expression -> expression / expression .)
    SHR             reduce using rule 45 (expression -> expression / expression .)
    EQ              reduce using rule 45 (expression -> expression / expression .)
    NEQ             reduce using rule 45 (expression -> expression / expression .)
    >               reduce using rule 45 (expression -> expression / expression .)
    <               reduce using rule 45 (expression -> expression / expression .)
    LE              reduce using rule 45 (expression -> expression / expression .)
    GE              reduce using rule 45 (expression -> expression / expression .)
    ;               reduce using rule 45 (expression -> expression / expression .)
    )               reduce using rule 45 (expression -> expression / expression .)
    ,               reduce using rule 45 (expression -> expression / expression .)

  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 70 ]
  ! %               [ shift and go to state 75 ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! SHL             [ shift and go to state 66 ]
  ! SHR             [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 115

    (51) expression -> expression OR expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    OR              reduce using rule 51 (expression -> expression OR expression .)
    ;               reduce using rule 51 (expression -> expression OR expression .)
    )               reduce using rule 51 (expression -> expression OR expression .)
    ,               reduce using rule 51 (expression -> expression OR expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74

  ! +               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 71 ]


state 116

    (54) expression -> expression EQ expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 54 (expression -> expression EQ expression .)
    &               reduce using rule 54 (expression -> expression EQ expression .)
    ^               reduce using rule 54 (expression -> expression EQ expression .)
    AND             reduce using rule 54 (expression -> expression EQ expression .)
    OR              reduce using rule 54 (expression -> expression EQ expression .)
    EQ              reduce using rule 54 (expression -> expression EQ expression .)
    NEQ             reduce using rule 54 (expression -> expression EQ expression .)
    >               reduce using rule 54 (expression -> expression EQ expression .)
    <               reduce using rule 54 (expression -> expression EQ expression .)
    LE              reduce using rule 54 (expression -> expression EQ expression .)
    GE              reduce using rule 54 (expression -> expression EQ expression .)
    ;               reduce using rule 54 (expression -> expression EQ expression .)
    )               reduce using rule 54 (expression -> expression EQ expression .)
    ,               reduce using rule 54 (expression -> expression EQ expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    SHL             shift and go to state 66
    SHR             shift and go to state 62

  ! +               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 117

    (56) expression -> expression > expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 56 (expression -> expression > expression .)
    &               reduce using rule 56 (expression -> expression > expression .)
    ^               reduce using rule 56 (expression -> expression > expression .)
    AND             reduce using rule 56 (expression -> expression > expression .)
    OR              reduce using rule 56 (expression -> expression > expression .)
    EQ              reduce using rule 56 (expression -> expression > expression .)
    NEQ             reduce using rule 56 (expression -> expression > expression .)
    >               reduce using rule 56 (expression -> expression > expression .)
    <               reduce using rule 56 (expression -> expression > expression .)
    LE              reduce using rule 56 (expression -> expression > expression .)
    GE              reduce using rule 56 (expression -> expression > expression .)
    ;               reduce using rule 56 (expression -> expression > expression .)
    )               reduce using rule 56 (expression -> expression > expression .)
    ,               reduce using rule 56 (expression -> expression > expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    SHL             shift and go to state 66
    SHR             shift and go to state 62

  ! +               [ reduce using rule 56 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 56 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 56 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 56 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 118

    (59) expression -> expression GE expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 59 (expression -> expression GE expression .)
    &               reduce using rule 59 (expression -> expression GE expression .)
    ^               reduce using rule 59 (expression -> expression GE expression .)
    AND             reduce using rule 59 (expression -> expression GE expression .)
    OR              reduce using rule 59 (expression -> expression GE expression .)
    EQ              reduce using rule 59 (expression -> expression GE expression .)
    NEQ             reduce using rule 59 (expression -> expression GE expression .)
    >               reduce using rule 59 (expression -> expression GE expression .)
    <               reduce using rule 59 (expression -> expression GE expression .)
    LE              reduce using rule 59 (expression -> expression GE expression .)
    GE              reduce using rule 59 (expression -> expression GE expression .)
    ;               reduce using rule 59 (expression -> expression GE expression .)
    )               reduce using rule 59 (expression -> expression GE expression .)
    ,               reduce using rule 59 (expression -> expression GE expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    SHL             shift and go to state 66
    SHR             shift and go to state 62

  ! +               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 119

    (46) expression -> expression % expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 46 (expression -> expression % expression .)
    -               reduce using rule 46 (expression -> expression % expression .)
    *               reduce using rule 46 (expression -> expression % expression .)
    /               reduce using rule 46 (expression -> expression % expression .)
    %               reduce using rule 46 (expression -> expression % expression .)
    |               reduce using rule 46 (expression -> expression % expression .)
    &               reduce using rule 46 (expression -> expression % expression .)
    ^               reduce using rule 46 (expression -> expression % expression .)
    AND             reduce using rule 46 (expression -> expression % expression .)
    OR              reduce using rule 46 (expression -> expression % expression .)
    SHL             reduce using rule 46 (expression -> expression % expression .)
    SHR             reduce using rule 46 (expression -> expression % expression .)
    EQ              reduce using rule 46 (expression -> expression % expression .)
    NEQ             reduce using rule 46 (expression -> expression % expression .)
    >               reduce using rule 46 (expression -> expression % expression .)
    <               reduce using rule 46 (expression -> expression % expression .)
    LE              reduce using rule 46 (expression -> expression % expression .)
    GE              reduce using rule 46 (expression -> expression % expression .)
    ;               reduce using rule 46 (expression -> expression % expression .)
    )               reduce using rule 46 (expression -> expression % expression .)
    ,               reduce using rule 46 (expression -> expression % expression .)

  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 70 ]
  ! %               [ shift and go to state 75 ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! SHL             [ shift and go to state 66 ]
  ! SHR             [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 120

    (55) expression -> expression NEQ expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 55 (expression -> expression NEQ expression .)
    &               reduce using rule 55 (expression -> expression NEQ expression .)
    ^               reduce using rule 55 (expression -> expression NEQ expression .)
    AND             reduce using rule 55 (expression -> expression NEQ expression .)
    OR              reduce using rule 55 (expression -> expression NEQ expression .)
    EQ              reduce using rule 55 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 55 (expression -> expression NEQ expression .)
    >               reduce using rule 55 (expression -> expression NEQ expression .)
    <               reduce using rule 55 (expression -> expression NEQ expression .)
    LE              reduce using rule 55 (expression -> expression NEQ expression .)
    GE              reduce using rule 55 (expression -> expression NEQ expression .)
    ;               reduce using rule 55 (expression -> expression NEQ expression .)
    )               reduce using rule 55 (expression -> expression NEQ expression .)
    ,               reduce using rule 55 (expression -> expression NEQ expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    SHL             shift and go to state 66
    SHR             shift and go to state 62

  ! +               [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 78 ]
  ! &               [ shift and go to state 64 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]
  ! EQ              [ shift and go to state 72 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 73 ]
  ! <               [ shift and go to state 65 ]
  ! LE              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 74 ]


state 121

    (47) expression -> expression | expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 47 (expression -> expression | expression .)
    AND             reduce using rule 47 (expression -> expression | expression .)
    OR              reduce using rule 47 (expression -> expression | expression .)
    ;               reduce using rule 47 (expression -> expression | expression .)
    )               reduce using rule 47 (expression -> expression | expression .)
    ,               reduce using rule 47 (expression -> expression | expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    &               shift and go to state 64
    ^               shift and go to state 79
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74

  ! +               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 47 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 47 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 47 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 47 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 47 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 47 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 47 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 78 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]


state 122

    (49) expression -> expression ^ expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    |               reduce using rule 49 (expression -> expression ^ expression .)
    ^               reduce using rule 49 (expression -> expression ^ expression .)
    AND             reduce using rule 49 (expression -> expression ^ expression .)
    OR              reduce using rule 49 (expression -> expression ^ expression .)
    ;               reduce using rule 49 (expression -> expression ^ expression .)
    )               reduce using rule 49 (expression -> expression ^ expression .)
    ,               reduce using rule 49 (expression -> expression ^ expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    &               shift and go to state 64
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74

  ! +               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 49 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 78 ]
  ! ^               [ shift and go to state 79 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 71 ]


state 123

    (31) repeat_instr -> REPEAT instructions UNTIL condition . ;

    ;               shift and go to state 136


state 124

    (24) assignment -> ID = expression ; .

    PRINT           reduce using rule 24 (assignment -> ID = expression ; .)
    ID              reduce using rule 24 (assignment -> ID = expression ; .)
    IF              reduce using rule 24 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 24 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 24 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 24 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 24 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 24 (assignment -> ID = expression ; .)
    {               reduce using rule 24 (assignment -> ID = expression ; .)
    $end            reduce using rule 24 (assignment -> ID = expression ; .)
    UNTIL           reduce using rule 24 (assignment -> ID = expression ; .)
    }               reduce using rule 24 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 24 (assignment -> ID = expression ; .)


state 125

    (25) choice_instr -> IF ( condition ) . instruction
    (26) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 137
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    repeat_instr                   shift and go to state 13
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16

state 126

    (27) choice_instr -> IF ( error ) . instruction
    (28) choice_instr -> IF ( error ) . instruction ELSE instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 138
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 20
    repeat_instr                   shift and go to state 13

state 127

    (29) while_instr -> WHILE ( condition ) . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 139
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    repeat_instr                   shift and go to state 13
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16

state 128

    (30) while_instr -> WHILE ( error ) . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 140
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 20
    repeat_instr                   shift and go to state 13

state 129

    (35) compound_instr -> { declarations instructions } .

    PRINT           reduce using rule 35 (compound_instr -> { declarations instructions } .)
    ID              reduce using rule 35 (compound_instr -> { declarations instructions } .)
    IF              reduce using rule 35 (compound_instr -> { declarations instructions } .)
    WHILE           reduce using rule 35 (compound_instr -> { declarations instructions } .)
    REPEAT          reduce using rule 35 (compound_instr -> { declarations instructions } .)
    RETURN          reduce using rule 35 (compound_instr -> { declarations instructions } .)
    BREAK           reduce using rule 35 (compound_instr -> { declarations instructions } .)
    CONTINUE        reduce using rule 35 (compound_instr -> { declarations instructions } .)
    {               reduce using rule 35 (compound_instr -> { declarations instructions } .)
    $end            reduce using rule 35 (compound_instr -> { declarations instructions } .)
    TYPE            reduce using rule 35 (compound_instr -> { declarations instructions } .)
    UNTIL           reduce using rule 35 (compound_instr -> { declarations instructions } .)
    }               reduce using rule 35 (compound_instr -> { declarations instructions } .)
    ELSE            reduce using rule 35 (compound_instr -> { declarations instructions } .)


state 130

    (73) args_list -> args_list , . arg
    (75) arg -> . TYPE ID

    TYPE            shift and go to state 97

    arg                            shift and go to state 141

state 131

    (70) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (35) compound_instr -> . { declarations instructions }

    {               shift and go to state 29

    compound_instr                 shift and go to state 142

state 132

    (75) arg -> TYPE ID .

    ,               reduce using rule 75 (arg -> TYPE ID .)
    )               reduce using rule 75 (arg -> TYPE ID .)


state 133

    (66) expr_list -> expr_list , . expression
    (40) expression -> . ID
    (41) expression -> . const
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression % expression
    (47) expression -> . expression | expression
    (48) expression -> . expression & expression
    (49) expression -> . expression ^ expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . expression SHL expression
    (53) expression -> . expression SHR expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression > expression
    (57) expression -> . expression < expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (62) expression -> . ID ( expr_list_or_empty )
    (63) expression -> . ID ( error )
    (37) const -> . INTEGER
    (38) const -> . FLOAT
    (39) const -> . STRING

    ID              shift and go to state 38
    (               shift and go to state 40
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 39
    STRING          shift and go to state 37

    expression                     shift and go to state 143
    const                          shift and go to state 35

state 134

    (62) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 62 (expression -> ID ( expr_list_or_empty ) .)


state 135

    (63) expression -> ID ( error ) .

    +               reduce using rule 63 (expression -> ID ( error ) .)
    -               reduce using rule 63 (expression -> ID ( error ) .)
    *               reduce using rule 63 (expression -> ID ( error ) .)
    /               reduce using rule 63 (expression -> ID ( error ) .)
    %               reduce using rule 63 (expression -> ID ( error ) .)
    |               reduce using rule 63 (expression -> ID ( error ) .)
    &               reduce using rule 63 (expression -> ID ( error ) .)
    ^               reduce using rule 63 (expression -> ID ( error ) .)
    AND             reduce using rule 63 (expression -> ID ( error ) .)
    OR              reduce using rule 63 (expression -> ID ( error ) .)
    SHL             reduce using rule 63 (expression -> ID ( error ) .)
    SHR             reduce using rule 63 (expression -> ID ( error ) .)
    EQ              reduce using rule 63 (expression -> ID ( error ) .)
    NEQ             reduce using rule 63 (expression -> ID ( error ) .)
    >               reduce using rule 63 (expression -> ID ( error ) .)
    <               reduce using rule 63 (expression -> ID ( error ) .)
    LE              reduce using rule 63 (expression -> ID ( error ) .)
    GE              reduce using rule 63 (expression -> ID ( error ) .)
    ;               reduce using rule 63 (expression -> ID ( error ) .)
    )               reduce using rule 63 (expression -> ID ( error ) .)
    ,               reduce using rule 63 (expression -> ID ( error ) .)


state 136

    (31) repeat_instr -> REPEAT instructions UNTIL condition ; .

    PRINT           reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ID              reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    IF              reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    WHILE           reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    REPEAT          reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    RETURN          reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    BREAK           reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    CONTINUE        reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    {               reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    $end            reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    UNTIL           reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    }               reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ELSE            reduce using rule 31 (repeat_instr -> REPEAT instructions UNTIL condition ; .)


state 137

    (25) choice_instr -> IF ( condition ) instruction .
    (26) choice_instr -> IF ( condition ) instruction . ELSE instruction

    PRINT           reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 25 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 144

  ! ELSE            [ reduce using rule 25 (choice_instr -> IF ( condition ) instruction .) ]


state 138

    (27) choice_instr -> IF ( error ) instruction .
    (28) choice_instr -> IF ( error ) instruction . ELSE instruction

    PRINT           reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 27 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 145

  ! ELSE            [ reduce using rule 27 (choice_instr -> IF ( error ) instruction .) ]


state 139

    (29) while_instr -> WHILE ( condition ) instruction .

    }               reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    UNTIL           reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 29 (while_instr -> WHILE ( condition ) instruction .)


state 140

    (30) while_instr -> WHILE ( error ) instruction .

    }               reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    UNTIL           reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 30 (while_instr -> WHILE ( error ) instruction .)


state 141

    (73) args_list -> args_list , arg .

    ,               reduce using rule 73 (args_list -> args_list , arg .)
    )               reduce using rule 73 (args_list -> args_list , arg .)


state 142

    (70) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 70 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 143

    (66) expr_list -> expr_list , expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . % expression
    (47) expression -> expression . | expression
    (48) expression -> expression . & expression
    (49) expression -> expression . ^ expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression
    (52) expression -> expression . SHL expression
    (53) expression -> expression . SHR expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . > expression
    (57) expression -> expression . < expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ,               reduce using rule 66 (expr_list -> expr_list , expression .)
    )               reduce using rule 66 (expr_list -> expr_list , expression .)
    +               shift and go to state 67
    -               shift and go to state 69
    *               shift and go to state 68
    /               shift and go to state 70
    %               shift and go to state 75
    |               shift and go to state 78
    &               shift and go to state 64
    ^               shift and go to state 79
    AND             shift and go to state 61
    OR              shift and go to state 71
    SHL             shift and go to state 66
    SHR             shift and go to state 62
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    >               shift and go to state 73
    <               shift and go to state 65
    LE              shift and go to state 63
    GE              shift and go to state 74


state 144

    (26) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 146
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 20
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    repeat_instr                   shift and go to state 13
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 16

state 145

    (28) choice_instr -> IF ( error ) instruction ELSE . instruction
    (11) instruction -> . print_instr
    (12) instruction -> . labeled_instr
    (13) instruction -> . assignment
    (14) instruction -> . choice_instr
    (15) instruction -> . while_instr
    (16) instruction -> . repeat_instr
    (17) instruction -> . return_instr
    (18) instruction -> . break_instr
    (19) instruction -> . continue_instr
    (20) instruction -> . compound_instr
    (21) print_instr -> . PRINT expression ;
    (22) print_instr -> . PRINT error ;
    (23) labeled_instr -> . ID : instruction
    (24) assignment -> . ID = expression ;
    (25) choice_instr -> . IF ( condition ) instruction
    (26) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (27) choice_instr -> . IF ( error ) instruction
    (28) choice_instr -> . IF ( error ) instruction ELSE instruction
    (29) while_instr -> . WHILE ( condition ) instruction
    (30) while_instr -> . WHILE ( error ) instruction
    (31) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (32) return_instr -> . RETURN expression ;
    (34) break_instr -> . BREAK ;
    (33) continue_instr -> . CONTINUE ;
    (35) compound_instr -> . { declarations instructions }

    PRINT           shift and go to state 12
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 25
    REPEAT          shift and go to state 18
    RETURN          shift and go to state 10
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 28
    {               shift and go to state 29

    return_instr                   shift and go to state 14
    assignment                     shift and go to state 19
    instruction                    shift and go to state 147
    compound_instr                 shift and go to state 21
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 27
    choice_instr                   shift and go to state 11
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 20
    repeat_instr                   shift and go to state 13

state 146

    (26) choice_instr -> IF ( condition ) instruction ELSE instruction .

    PRINT           reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 26 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 147

    (28) choice_instr -> IF ( error ) instruction ELSE instruction .

    PRINT           reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 28 (choice_instr -> IF ( error ) instruction ELSE instruction .)

